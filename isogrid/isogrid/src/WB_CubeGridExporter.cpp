#include "WB_CubeGridExporter.h"
#include <fstream>
#include <sstream>

void WB_CubeGridExporter::exportMesh(const std::string &path, double cx, double cy, double cz, int I, int J, int K,
                                     double dx, double dy, double dz, const std::vector<bool> &values, int li, int ui,
                                     int lj, int uj, int lk, int uk)
{

  struct Vertex
  {
    float x, y, z;
  };
  struct Face
  {
    int a, b, c, d;
  };

  std::vector<Vertex> vertices;
  std::vector<Face> faces;

  getMesh(
      [&vertices](float x, float y, float z) {
        vertices.push_back({ x, y, z });
      },
      [&faces](int a, int b, int c, int d) {
        faces.push_back({ a, b, c, d });
      },
      cx, cy, cz, I, J, K, dx, dy, dz, values, li, ui, lj, uj, lk, uk);

  std::ofstream file(path);
  std::stringstream objstr;
  objstr << "# generated by WB_CubeGridExporter\n";
  for (auto &vertex : vertices)
  {
    objstr << "v " << vertex.x << " " << vertex.y << " " << vertex.z << '\n';
  }
  for (auto &face : faces)
  {
    objstr << "f " << face.a << ' ' << face.b << ' ' << face.c << '\n';
    objstr << "f " << face.c << ' ' << face.d << ' ' << face.a << '\n';
  }
  file << objstr.str();
}

void WB_CubeGridExporter::getMesh(std::function<void(float, float, float)> addVertexCallback,
                                  std::function<void(int, int, int, int)> addFaceCallback, double cx, double cy,
                                  double cz, int I, int J, int K, double dx, double dy, double dz,
                                  const std::vector<bool> &values, int li, int ui, int lj, int uj, int lk, int uk)
{
  auto vertexCount = 0;
  auto index = [](int i, int j, int k, int JK, int K, int li, int ui, int lj, int uj, int lk, int uk) {
    if (i > li - 1 && j > lj - 1 && k > lk - 1 && i < ui && j < uj && k < uk)
    {
      return k + j * K + i * JK;
    }
    else
    {
      return -1;
    }
  };

  std::vector<std::vector<std::vector<int>>> vertexIndices;
  std::vector<double> c = { cx - I * 0.5f * dx, cy - J * 0.5f * dy, cz - K * 0.5f * dz };

  auto getVindex = [&vertexIndices, c, addVertexCallback, &vertexCount](int i, int j, int k, double dx, double dy,
                                                                        double dz) {
    if (vertexIndices[i][j][k] == -1)
    {
      vertexIndices[i][j][k] = (vertexCount++) + 1;
      addVertexCallback((float)(c[0] + i * dx), (float)(c[1] + j * dy), (float)(c[2] + k * dz));
    }
    return vertexIndices[i][j][k];
  };

  vertexIndices.resize(I + 1);
  for (int i = 0; i <= I; i++)
  {
    vertexIndices[i].resize(J + 1);
    for (int j = 0; j <= J; j++)
    {
      vertexIndices[i][j].resize(K + 1);
      for (int k = 0; k <= K; k++)
      {
        vertexIndices[i][j][k] = -1;
      }
    }
  }

  int val0 = 0, valm = 0, sum = 0;
  int idx = 0;
  int JK = J * K;

  for (int i = li; i <= ui; i++)
  {
    for (int j = lj; j < uj; j++)
    {
      for (int k = lk; k < uk; k++)
      {
        idx = index(i, j, k, J, JK, li, ui, lj, uj, lk, uk);
        val0 = idx == -1 ? 0 : values[idx] ? 1 : 0;
        idx = index(i - 1, j, k, J, JK, li, ui, lj, uj, lk, uk);
        valm = idx == -1 ? 0 : values[idx] ? 1 : 0;
        sum = val0 + valm;
        if (sum == 1)
        {
          addFaceCallback(getVindex(i, j, k, dx, dy, dz), getVindex(i, j + 1, k, dx, dy, dz),
                          getVindex(i, j + 1, k + 1, dx, dy, dz), getVindex(i, j, k + 1, dx, dy, dz));
        }
      }
    }
  }

  for (int i = li; i < ui; i++)
  {
    for (int j = lj; j <= uj; j++)
    {
      for (int k = lk; k < uk; k++)
      {
        idx = index(i, j, k, J, JK, li, ui, lj, uj, lk, uk);
        val0 = idx == -1 ? 0 : values[idx] ? 1 : 0;
        idx = index(i, j - 1, k, J, JK, li, ui, lj, uj, lk, uk);
        valm = idx == -1 ? 0 : values[idx] ? 1 : 0;
        sum = val0 + valm;
        if (sum == 1)
        {
          addFaceCallback(getVindex(i, j, k, dx, dy, dz), getVindex(i + 1, j, k, dx, dy, dz),
                          getVindex(i + 1, j, k + 1, dx, dy, dz), getVindex(i, j, k + 1, dx, dy, dz));
        }
      }
    }
  }

  for (int i = li; i < ui; i++)
  {
    for (int j = lj; j < uj; j++)
    {
      for (int k = lk; k <= uk; k++)
      {
        idx = index(i, j, k, J, JK, li, ui, lj, uj, lk, uk);
        val0 = idx == -1 ? 0 : values[idx] ? 1 : 0;
        idx = index(i, j, k - 1, J, JK, li, ui, lj, uj, lk, uk);
        valm = idx == -1 ? 0 : values[idx] ? 1 : 0;
        sum = val0 + valm;
        if (sum == 1)
        {
          addFaceCallback(getVindex(i, j, k, dx, dy, dz), getVindex(i + 1, j, k, dx, dy, dz),
                          getVindex(i + 1, j + 1, k, dx, dy, dz), getVindex(i, j + 1, k, dx, dy, dz));
        }
      }
    }
  }
}
